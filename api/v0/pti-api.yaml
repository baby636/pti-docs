openapi: 3.0.2
info:
  title: Public PTI API (subset)
  version: 0.0.3
  description: Public PTI API (subset)

security:
  - clientId: []
    signature: []
  - clientId: []
    userToken: []
paths:
  /auth/userToken:
    post:
      summary: Get a user token
      security:
        - clientId: []
          signature: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userTokenRequest'
        required: true

      responses:
        '200':
          description: userToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userToken'

        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/clients/{clientId}':
    parameters:
      - name: clientId
        schema:
          type: string
        in: path
        required: true

    get:
      summary: Get a specific Client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client'

        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      summary: Modify client information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client'

      responses:
        '200':
          description: Successfully updated the client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client'

        '400':
          description: Client missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /users:
    get:
      summary: Get a list of users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/objectReference'

    post:
      summary: Add a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfUserSubTypes'

      responses:
        '201':
          description: Successfully added User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'

        '400':
          description: Missing required fields on User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: User already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/users/{userId}':
    parameters:
      - name: userId
        schema:
          type: string
        in: path
        required: true

    get:
      summary: Get a specific User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfUserSubTypes'

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      summary: Update a specific User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfUserSubTypes'
        required: true

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'

        '400':
          description: User missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      summary: Deactivate a specific user (soft delete)
      responses:
        '200':
          description: OK

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/users/{userId}/kycs':
    parameters:
      - name: userId
        schema:
          type: string
        in: path
        required: true

    get:
      summary: Get a list of KYCs for a specific user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/objectReference'

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/users/{userId}/kycs/{kycId}':
    parameters:
      - name: userId
        schema:
          type: string
        in: path
        required: true
      - name: kycId
        schema:
          type: string
        in: path
        required: true

    get:
      summary: Get a specific KYC for a specific User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kyc'

        '404':
          description: User or KYC not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/users/{userId}/transactionLogs':
    parameters:
      - name: userId
        schema:
          type: string
        in: path
        required: true

    get:
      summary: Get a list of Transaction Log for a specific User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/objectReference'

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    post:
      summary: Log a transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfTransactionSubTypes'

      responses:
        '201':
          description: Successfully added transaction log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'

        '400':
          description: Missing required fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

        '406':
          description: >-
            More information about the User is needed in order to approve the
            transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputRequest'

  '/users/{userId}/transactionLogs/{transactionLogId}':
    parameters:
      - name: userId
        schema:
          type: string
        in: path
        required: true
      - name: transactionLogId
        schema:
          type: string
        in: path
        required: true

    get:
      summary: Get a specific Transaction Log for a specific User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfTransactionSubTypes'

        '404':
          description: User of Transaction Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'


  '/users/{userId}/wallets':
    parameters:
      - name: userId
        schema:
          type: string
        in: path
        required: true

    post:
      summary: Create a user wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfWalletSubTypes'
      responses:
        '201':
          description: Successfully added wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Missing required fields on Wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: Wallet already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      summary: Get a list of wallets for a specific user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/objectReference'

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/users/{userId}/wallets/{walletId}':
    parameters:
      - name: userId
        schema:
          type: string
        in: path
        required: true
      - name: walletId
        schema:
          type: string
        in: path
        required: true
    get:
      summary: Get information about wallet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfWalletSubTypes'

        '404':
          description: User or wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  '/users/{userId}/wallets/fiat/{walletId}/funding':
    parameters:
      - name: userId
        schema:
          type: string
        in: path
        required: true
      - name: walletId
        schema:
          type: string
        in: path
        required: true
    post:
      summary: Execute a fiat deposit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fiatFundingTransaction'
      responses:
        '201':
          description: Successfully performed the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Missing required fields on Transaction, invalid operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

        '404':
          description: User or wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

        '406':
          description: >-
            More information about the User is needed in order to approve the
            transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputRequest'
        '501':
          description: operation not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

components:
  schemas:
    address:
      type: object
      properties:
        streetAddress:
          type: string
        city:
          type: string
        postalCode:
          type: string
        stateCode:
          $ref: '#/components/schemas/stateCode'
        country:
          $ref: '#/components/schemas/countryCode'
        default:
          type: boolean

    userTokenRequest:
      required:
        - url
      type: object
      properties:
        url:
          type: string

    userToken:
      required:
        - accessToken
        - expiresIn
        - tokenType
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: string
        tokenType:
          type: string

    bii:
      type: object
      properties:
        value:
          type: string
        type:
          type: string
      discriminator:
        propertyName: type

    business:
      type: object
      allOf:
        - $ref: '#/components/schemas/user'
      properties:
        biis:
          type: array
          items:
            $ref: '#/components/schemas/oneOfBiiSubTypes'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/address'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/email'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/person'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/phone'
        sectors:
          type: array
          items:
            type: string
        creationDate:
          type: string
        businessType:
          type: string
        businessName:
          type: string

    client:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        countryCode:
          $ref: '#/components/schemas/countryCode'
        stateCode:
          $ref: '#/components/schemas/stateCode'
        publicKey:
          $ref: '#/components/schemas/publicKey'
        id:
          type: string
        mainWebhook:
          $ref: '#/components/schemas/webhook'

    countryCode:
      type: object
      properties:
        code:
          type: string
          description: ISO 3166 alpha 1 country code, example US
          pattern: '^([A-Za-z]{2})$' #Pre validation - Validated further in backend

    ein:
      type: object
      allOf:
        - $ref: '#/components/schemas/bii'
      properties:
        number:
          type: string
          description: Ein number, properly formatted, example 12-3456789
          pattern: '^([07][1-7]|1[0-6]|2[0-7]|[35][0-9]|[468][0-8]|9[0-589])-?\d{7}$'

    email:
      required:
        - address
      type: object
      properties:
        default:
          type: boolean
        address:
          type: string
          format: email

    error:
      required:
        - code
        - message
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string

    inputRequest:
      required:
        - inputDemand
        - url
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
        url:
          type: string

    itin:
      type: object
      allOf:
        - $ref: '#/components/schemas/pii'
      properties:
        number:
          type: string
          description: itin number, properly formatted, example 911-83-1111
          pattern: '^9\d{2}-?((5[0-9]|6[0-5])|(8[3-8])|(9[0-2])|(9[4-9]))-?\d{4}$'

    kyc:
      type: object
      properties:
        status:
          enum:
            - ACCEPTED
            - REFUSED
            - MANUAL_REVIEW
          type: string
        details:
          type: object
        id:
          type: string
        level:
          description: >-
            1:Basic: name and address, 2:Moderate: + phone and email,
            3:Advanced: + ssn/taxid, 4:Complete: + photo id/passport
          enum:
            - LEVEL_1
            - LEVEL_2
            - LEVEL_3
            - LEVEL_4
          type: string
        riskAssessment:
          type: string

    name:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string

    objectReference:
      required:
        - id
        - link
      type: object
      properties:
        id:
          type: string
        link:
          type: string

    oneOfBiiSubTypes:
      oneOf:
        - $ref: '#/components/schemas/ein'
      discriminator:
        propertyName: type

    oneOfPiiSubTypes:
      oneOf:
        - $ref: '#/components/schemas/ssn'
        - $ref: '#/components/schemas/itin'
      discriminator:
        propertyName: type

    oneOfTransactionSubTypes:
      oneOf:
        - $ref: '#/components/schemas/fundingTransaction'
        - $ref: '#/components/schemas/withdrawalTransaction'
        - $ref: '#/components/schemas/transferTransaction'
      discriminator:
        propertyName: type

    oneOfUserSubTypes:
      oneOf:
        - $ref: '#/components/schemas/person'
        - $ref: '#/components/schemas/business'
      discriminator:
        propertyName: type

    oneOfPaymentMethod:
      oneOf:
        - $ref: '#/components/schemas/tokenPaymentMethod'
        - $ref: '#/components/schemas/fiatPaymentMethod'
      discriminator:
        propertyName: type

    oneOfFiatPaymentInformation:
      oneOf:
        - $ref: '#/components/schemas/creditCardPaymentInformation'
        - $ref: '#/components/schemas/paypalPaymentInformation'
        - $ref: '#/components/schemas/bankAccountPaymentInformation'
      discriminator:
        propertyName: type

    person:
      type: object
      allOf:
        - $ref: '#/components/schemas/user'
      properties:
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/address'
        piis:
          type: array
          items:
            $ref: '#/components/schemas/oneOfPiiSubTypes'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/email'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/phone'
        name:
          $ref: '#/components/schemas/name'
        gender:
          type: string
        dateOfBirth:
          type: string

    pii:
      type: object
      properties:
        value:
          type: string
        type:
          type: string
      discriminator:
        propertyName: type

    phone:
      type: object
      properties:
        default:
          type: boolean
        number:
          type: string
          description: Phone number, can be formatted using plus sign, spaces, parenthesis or hyphens
          pattern: '/^[+]?(?:\(\d+(?:\.\d+)?\)|\d+(?:\.\d+)?)(?:[ -]?(?:\(\d+(?:\.\d+)?\)|\d+(?:\.\d+)?))*(?:[ ]?(?:x|ext)\.?[ ]?\d{1,5})?$/' #Voluntarily loose
        type:
          type: string

    publicKey:
      type: object
      properties:
        type:
          type: string
        content:
          type: string

    ssn:
      type: object
      allOf:
        - $ref: '#/components/schemas/pii'
      properties:
        number:
          type: string
          description: Valid us formatted SSN, example 222-22-2222
          pattern: '^\d{3}-\d{2}-\d{4}$'

    stateCode:
      type: object
      properties:
        code:
          type: string
          description: ISO 3166-2 state code, example US-CA
          pattern: '^([A-Za-z]{2}-[A-Za-z0-9]{2})$' #Pre validation, will be validated in backend

    wallet:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        balance:
          type: number

    fiatWallet:
      type: object
      allOf:
        - $ref: '#/components/schemas/wallet'
      properties:
        currency:
          type: string

    tokenWallet:
      type: object
      allOf:
        - $ref: '#/components/schemas/wallet'
      properties:
        tokenType:
          type: string

    oneOfWalletSubTypes:
      oneOf:
        - $ref: '#/components/schemas/tokenWallet'
        - $ref: '#/components/schemas/fiatWallet'
      discriminator:
        propertyName: type

    fiatFundingTransaction:
      type: object
      allOf:
        - $ref: '#/components/schemas/transaction'
      properties:
        sourceMethod:
          $ref: '#/components/schemas/fiatPaymentMethod'

    transaction:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        amount:
          type: number
        initiator:
          $ref: '#/components/schemas/oneOfUserSubTypes'

    transactionType:
      type: object
      allOf:
        - $ref: '#/components/schemas/transaction'
      properties:
        type:
          type: string
      discriminator:
        propertyName: type

    fundingTransaction:
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        sourceMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'

    withdrawalTransaction:
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        destinationMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'

    transferTransaction:
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        transferMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        destination:
          $ref: '#/components/schemas/oneOfUserSubTypes'

    paymentMethod:
      type: object
      properties:
        type:
          type: string

    fiatPaymentMethod:
      type: object
      allOf:
        - $ref: '#/components/schemas/paymentMethod'
      properties:
        currency:
          type: string
        paymentInformation:
          $ref: '#/components/schemas/oneOfFiatPaymentInformation'

    tokenPaymentMethod:
      type: object
      allOf:
        - $ref: '#/components/schemas/paymentMethod'
      properties:
        tokenType:
          type: string
        paymentInformation:
          $ref: '#/components/schemas/tokenPaymentInformation'

    paymentInformation:
      type: object
      properties:
        type:
          type: string

    creditCardPaymentInformation:
      type: object
      allOf:
        - $ref: '#/components/schemas/paymentInformation'
      properties:
        number:
          type: string
          pattern: '^(([0-9])([- ]?)){15,16}$' #Pre-Validation, we run additional checks in backend (Luhn algo)
        type:
          type: string
        expirationYear:
          type: string
          description: 2 or 4 digits
          pattern: '^([0-9]){2,4}$'
        expirationMonth:
          description: 2 digits
          type: string
          pattern: '^([0-9]){2}$'
        cvv:
          description: 3 or 4 digits
          type: string
          pattern: '^([0-9]){3,4}$'

    paypalPaymentInformation:
      type: object
      allOf:
        - $ref: '#/components/schemas/paymentInformation'
      properties:
        confirmedAddress:
          type: string
          format: email
        paymentAddress:
          type: string
          format: email
        payerStatus:
          type: string
        accountId:
          type: string

    bankAccountPaymentInformation:
      type: object
      allOf:
        - $ref: '#/components/schemas/paymentInformation'
      properties:
        accountNumber:
          type: string
        swiftCode:
          type: string
          description: Valid bank swift code
          pattern: '[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?'
        routingNumber:
          type: string
          description: Valid bank routing number, between 7 and 12 digits
          pattern: '^[0-9]{7,12}$'

    tokenPaymentInformation:
      type: object
      allOf:
        - $ref: '#/components/schemas/paymentInformation'
      properties:
        address:
          type: string
    user:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
      discriminator:
        propertyName: type
    webhook:
      required:
        - url
      type: object
      properties:
        url:
          type: string

  securitySchemes:
    clientId:
      type: apiKey
      in: header
      name: x-pti-client-id
      description: All requests must include the x-pti-client-id header containing your client ID.
    signature:
      type: apiKey
      in: header
      name: x-pti-signature
      description: Client signature of requests.
    userToken:
      type: apiKey
      in: header
      name: x-pti-token
      description: User token.
